const bedrock = require('bedrock-protocol');
const { Authflow, Titles } = require('prismarine-auth');
const fetch = require('node-fetch');

async function connectToServer() {
    const authflow = new Authflow(undefined, "./data", {
        flow: "live",
        authTitle: Titles.MinecraftNintendoSwitch,
        deviceType: "Nintendo",
        doSisuAuth: true
    });

    try {
        const { userHash, XSTSToken } = await authflow.getXboxToken("rp://playfabapi.com/");
        
        const response = await fetch("https://20ca2.playfabapi.com/Client/LoginWithXbox?sdk=XPlatCppSdk-3.6.190304", {
            method: "POST",
            headers: {
                "Cache-Control": "no-cache",
                "Accept": "application/json",
                "User-Agent": "ibhttpclient/1.0.0.0",
                "Content-Type": "application/json; charset=utf-8",
                "x-playfabsdk": "XPlatCppSdk-3.6.190304"
            },
            body: JSON.stringify({
                CreateAccount: true,
                TitleId: "20CA2",
                XboxToken: `XBL3.0 x=${userHash};${XSTSToken}`
            })
        });
        
        const baseEntity = await response.json();
        if (baseEntity.error) {
            throw new Error(baseEntity.errorMessage);
        }
        
        const client = bedrock.createClient({
            host: "Server Ip",
            port: Server Port,
            profilesFolder: "./data",
            skinData: { PersonaPieces: [] },
            conLog: console.log,
            skipPing: true
        });
        
        client.on("disconnect", (packet) => console.log("Disconnected:", packet));
        
        client.on("play_status", () => {
            console.log("[info] Connected to server.");

            setTimeout(() => {
                console.log("[info] name spoofing...");
                try {
                    client.write("command_request", {
                        command: `tell @a discord.gg/ranls`,
                        origin: { type: 5, uuid: "anything?", request_id: "whats this then" },
                        internal: false,
                        version: 24
                    });
                    console.log("[info] Name spoofer command sent.");
                } catch (error) {
                    console.error("[error] Name spoofing failed:", error.message);
                }
            }, 2000);

            setTimeout(() => {
                console.log("[info] Disconnecting...");
                client.disconnect();
            }, 10000);
        });

        client.on("player_list", (packet) => {
            const { records } = packet.records;
            if (packet.records.type === "add") {
                records.forEach(record => console.log(`${record.username} joined`));
            } else if (packet.records.type === "remove") {
                console.log(`${records[0]?.username} left`);
            }
        });

        client.on("start_game", () => console.log(`${client.username} joined the game`));
        
    } catch (error) {
        console.error("[error]", error.message.includes("No valid subscription") ? "No valid subscription" : error.message);
    }
}

connectToServer();
